def mergeSort(arr):
    if len(arr) < 2:
        return arr, 0
    mid = len(arr) // 2
    left, left_inv = mergeSort(arr[:mid])
    right, right_inv = mergeSort(arr[mid:])
    merged, split_inv = merge(left, right)
    return merged, left_inv + right_inv + split_inv

def merge(left, right):
    i = j = 0
    merged = []
    inversions = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            inversions += len(left) - i
    merged.extend(left[i:])
    merged.extend(right[j:])
    return merged, inversions

arr = [2, 3, 8, 6, 1]
_, inv_count = mergeSort(arr)
print(inv_count)  # Output: 5
